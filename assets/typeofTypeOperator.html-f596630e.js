import{_ as n,p as s,q as a,a1 as e}from"./framework-1cb228a4.js";const t={},p=e(`<p><code>JavaScript</code> 中已经有了一个 <code>typeof</code> 运算符，可以在表达式上下文中使用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 输出 &quot;string&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>TypeScript</code> 添加了一个 <code>typeof</code> 运算符，可以在类型上下文中使用，用于引用变量或属性的类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> n<span class="token operator">:</span> <span class="token keyword">typeof</span> s<span class="token punctuation">;</span>
<span class="token comment">// let n: string;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于基本类型并没有什么用处，但与其他类型运算符结合使用，可以使用 <code>typeof</code> 方便地表达许多模式。例如，让我们首先查看预定义类型 <code>ReturnType&lt;T&gt;</code>。它获取函数类型并生成其返回类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Predicate</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">K</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>Predicate<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type K = boolean;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们尝试在函数名称上使用 <code>ReturnType</code>，我们会看到一个有指导意义的错误：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>f<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;f&#39; refers to a value, but is being used as a type here. Did you mean &#39;typeof f&#39;?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请记住，值和类型并不相同。要引用值 <code>f</code> 具有的类型，我们使用 <code>typeof</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> f<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type P = {</span>
<span class="token comment">//   x: number;</span>
<span class="token comment">//   y: number;</span>
<span class="token comment">// };</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="限制" tabindex="-1"><a class="header-anchor" href="#限制" aria-hidden="true">#</a> 限制</h2><p><code>TypeScript</code> 有意限制了您可以在 <code>typeof</code> 上使用的表达式类型。</p><p>具体来说，只能在标识符（即变量名）或其属性上使用 <code>typeof</code>。这有助于避免编写您认为正在执行但实际上不执行的代码的混淆陷阱：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 希望使用 ReturnType&lt;typeof msgbox&gt;</span>
<span class="token keyword">let</span> shouldContinuts<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token function">msgbox</span><span class="token punctuation">(</span><span class="token string">&quot;Are you sure you want to continue?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 期望“，”。</span>

<span class="token comment">// 译者注: 解释一下，这里的 msgbox(&quot;Are you sure you want to continue?&quot;) 是一个函数调用表达式, 而不是一个类型表达式, 所以这里的 typeof msgbox(&quot;Are you sure you want to continue?&quot;) 是一个错误的类型表达式, 不能用于类型上下文中, 如果你想要使用 ReturnType, 你应该使用 typeof msgbox, 而不是 typeof msgbox(&quot;Are you sure you want to continue?&quot;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","typeofTypeOperator.html.vue"]]);export{u as default};
