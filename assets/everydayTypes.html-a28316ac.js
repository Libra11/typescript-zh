import{_ as n,p as s,q as a,a1 as e}from"./framework-1cb228a4.js";const t={},p=e(`<p>在本章中，我们将介绍在<code>JavaScript</code>代码中最常见的一些类型，并解释在<code>TypeScript</code>中描述这些类型的相应方法。这不是一个详尽无遗的列表，未来的章节将描述更多命名和使用其他类型的方式。</p><p>类型也可以出现在许多不仅仅是类型注释的地方。当我们了解类型本身时，我们也将了解可以引用这些类型以形成新结构的地方。</p><p>我们将从回顾编写<code>JavaScript</code>或<code>TypeScript</code>代码时可能遇到的最基本和常见的类型开始。这些稍后将形成更复杂类型的核心构建块。</p><h2 id="原始类型-string-字符串-、number-数字-和-boolean-布尔值" tabindex="-1"><a class="header-anchor" href="#原始类型-string-字符串-、number-数字-和-boolean-布尔值" aria-hidden="true">#</a> 原始类型：<code>string</code>（字符串）、<code>number</code>（数字）和 <code>boolean</code>（布尔值）</h2><p><code>JavaScript</code>有三种非常常用的原始类型：字符串、数字和布尔值。每种类型在<code>TypeScript</code>中都有相应的类型。正如您可能期望的那样，如果在这些类型的值上使用<code>JavaScript</code> <code>typeof</code>运算符，您将看到相同的名称：</p><ul><li><code>string</code>表示字符串值，例如&quot;<code>Hello, world</code>&quot;</li><li><code>number</code>用于数字，例如<code>42</code>。<code>JavaScript</code>没有针对整数的特殊运行时值，因此没有相当于<code>int</code>或<code>float</code>的等效值 - 一切都是<code>number</code></li><li><code>boolean</code>用于两个值<code>true</code>和<code>false</code></li></ul><blockquote><p>类型名称<code>String</code>、<code>Number</code>和<code>Boolean</code>（以大写字母开头）是合法的，但是指的是一些很少出现在您的代码中的特殊内置类型。始终使用<code>string</code>、<code>number</code>或<code>boolean</code>作为类型。</p></blockquote><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><p>要指定像<code>[1, 2, 3]</code>这样的数组的类型，可以使用语法 <code>number[]</code>；这种语法适用于任何类型（例如 <code>string[]</code>是字符串数组，依此类推）。您还可以将其写成 <code>Array&lt;number&gt;</code>，这意味着相同的事情。我们将在讲解泛型时了解更多 <code>T&lt;U&gt;</code>语法的内容。</p><blockquote><p>请注意，<code>[number]</code>是一件不同的事情；请参阅关于元组的部分。</p></blockquote><h2 id="any" tabindex="-1"><a class="header-anchor" href="#any" aria-hidden="true">#</a> <code>any</code></h2><p><code>TypeScript</code> 还有一个特殊类型 <code>any</code>，当你不想让某个值引起类型检查错误时，可以使用它。</p><p>当一个值是 <code>any</code> 类型时，你可以访问它的任何属性（它们将是 <code>any</code> 类型），像函数一样调用它，将它赋值给任何类型的值，或者几乎任何其他语法合法的操作：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> obj<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 以下任何一行代码都不会引发编译器错误。</span>
<span class="token comment">// 使用 any 禁用了所有进一步的类型检查，假定你比 TypeScript 更了解环境。</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> n<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你不想写出一个长类型，只是为了让 <code>TypeScript</code> 相信某个特定的代码行是可以的时，<code>any</code> 类型非常有用。</p><h3 id="noimplicitany" tabindex="-1"><a class="header-anchor" href="#noimplicitany" aria-hidden="true">#</a> <code>noImplicitAny</code></h3><p>当你没有指定类型，并且 <code>TypeScript</code> 无法从上下文中推断出类型时，编译器通常会默认为 <code>any</code>。</p><p>不过通常要避免这种情况，因为 <code>any</code> 没有经过类型检查。使用编译器标志 <code>noImplicitAny</code> 将隐式的 <code>any</code> 标记为错误。</p><h2 id="变量的类型注解" tabindex="-1"><a class="header-anchor" href="#变量的类型注解" aria-hidden="true">#</a> 变量的类型注解</h2><p>当你使用 <code>const</code>、<code>var</code> 或 <code>let</code> 声明一个变量时，可以选择添加类型注解，显式指定变量的类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> myName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>TypeScript</code> 不使用 &quot;<code>types on the left</code>&quot; 类型声明，如 <code>int x = 0</code>; 类型注解总是在被注释的事物之后。</p><p>但在大多数情况下，这是不需要的。在可能的情况下，<code>TypeScript</code> 会自动推断你代码中的类型。例如，变量的类型是基于其初始化器的类型推断得出的：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 不需要类型注解——&#39;myName&#39; 推断为 &#39;string&#39; 类型</span>
<span class="token keyword">let</span> myName <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>大部分时间你不需要显式地学习推断规则。如果你刚开始使用 <code>TypeScript\`\`，请尝试使用比你认为需要更少的类型注解——你可能会惊讶地发现你需要的类型注解非常少，TypeScript</code> 就能完全理解发生了什么。</p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p>在 <code>JavaScript</code> 中，函数是传递数据的主要方式。<code>TypeScript</code> 允许你指定函数的输入和输出值的类型。</p><h3 id="参数类型注解" tabindex="-1"><a class="header-anchor" href="#参数类型注解" aria-hidden="true">#</a> 参数类型注解</h3><p>当你声明一个函数时，你可以在每个参数后面添加类型注解来声明函数接受的参数类型。参数类型注解放在参数名称后面：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 参数类型注解</span>
<span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当一个参数有类型注解时，传递给该函数的参数将会被检查：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 如果执行将会出现运行时错误！</span>
<span class="token function">greet</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Argument of type &#39;number&#39; is not assignable to parameter of type &#39;string&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>即使你没有在参数上使用类型注解，<code>TypeScript</code> 仍会检查你传递了正确数量的参数。</p></blockquote><h3 id="返回类型注释" tabindex="-1"><a class="header-anchor" href="#返回类型注释" aria-hidden="true">#</a> 返回类型注释</h3><p>你也可以添加返回类型注释。返回类型注释出现在参数列表之后：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getFavoriteNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">26</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与变量类型注释一样，通常情况下你不需要返回类型注释，因为 <code>TypeScript</code> 会根据函数的返回语句推断出函数的返回类型。上面例子中的类型注释没有改变任何东西。某些代码库可能会显式指定返回类型以进行文档化，防止意外更改或者出于个人喜好。</p><h3 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数" aria-hidden="true">#</a> 匿名函数</h3><p>匿名函数与函数声明有一点不同。当一个函数出现在 <code>TypeScript</code> 可以确定如何调用它的位置时，该函数的参数会自动获得类型。</p><p>下面是一个例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 这里没有类型注释，但 TypeScript 可以发现这个错误</span>
<span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Eve&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 函数的上下文类型推断</span>
names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Property &#39;toUppercase&#39; does not exist on type &#39;string&#39;. Did you mean &#39;toUpperCase&#39;?</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 箭头函数也适用上下文类型推断</span>
names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Property &#39;toUppercase&#39; does not exist on type &#39;string&#39;. Did you mean &#39;toUpperCase&#39;?</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即使参数 <code>s</code> 没有类型注释，<code>TypeScript</code> 也使用了 <code>forEach</code> 函数的类型，以及数组的推断类型，来确定 <code>s</code> 的类型。</p><p>这个过程称为上下文类型推断，因为函数所在的上下文环境会决定它应该有什么类型。</p><p>与推断规则类似，你不需要显式学习它发生的方式，但了解它的存在可以帮助你注意到类型注释不需要的情况。稍后，我们将看到更多示例，了解值出现的上下文如何影响其类型。</p><h2 id="对象类型" tabindex="-1"><a class="header-anchor" href="#对象类型" aria-hidden="true">#</a> 对象类型</h2><p>除了基本类型，你将遇到的最常见类型是对象类型。它指的是任何具有属性的 <code>JavaScript</code> 值，几乎所有的值都是这种类型！为了定义一个对象类型，我们只需要列出它的属性和它们的类型。</p><p>例如，这里是一个接受类似于点的对象的函数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 参数的类型注释是一个对象类型</span>
<span class="token keyword">function</span> <span class="token function">printCoord</span><span class="token punctuation">(</span>pt<span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The coordinate&#39;s x value is &quot;</span> <span class="token operator">+</span> pt<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The coordinate&#39;s y value is &quot;</span> <span class="token operator">+</span> pt<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">printCoord</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">7</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们用两个属性 - <code>x</code> 和 <code>y</code> - 标注了参数的类型，它们的类型都是 <code>number</code>。你可以用逗号或分号来分隔属性，最后的分隔符都是可选的。</p><p>每个属性的类型部分也是可选的。如果你不指定类型，它会被假定为 <code>any</code> 类型。</p><h3 id="可选属性" tabindex="-1"><a class="header-anchor" href="#可选属性" aria-hidden="true">#</a> 可选属性</h3><p>对象类型也可以指定它们的一些或全部属性是可选的。要做到这一点，只需要在属性名后面添加一个 <code>?</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">printName</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token punctuation">{</span> first<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> last<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token comment">// 两个都可以</span>
<span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">{</span> first<span class="token operator">:</span> <span class="token string">&quot;Bob&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">{</span> first<span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> last<span class="token operator">:</span> <span class="token string">&quot;Alisson&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>JavaScript</code> 中，如果你访问一个不存在的属性，你会得到 <code>undefined</code> 的值而不是运行时错误。因此，当你读取一个可选属性时，你需要在使用它之前检查它是否为 <code>undefined。</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">printName</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token punctuation">{</span> first<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> last<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 错误 - 如果没有提供 &#39;obj.last&#39;，就可能会崩溃！</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>last<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Object is possibly &#39;undefined&#39;.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>last <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// OK</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>last<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 一种使用现代 JavaScript 语法的安全替代方式：</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>last<span class="token operator">?.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型" aria-hidden="true">#</a> 联合类型</h2><p><code>TypeScript</code> 的类型系统允许你使用各种操作符从现有类型中构建新的类型。现在我们已经知道了如何编写一些类型，是时候开始以有趣的方式组合它们了。</p><h3 id="定义一个联合类型" tabindex="-1"><a class="header-anchor" href="#定义一个联合类型" aria-hidden="true">#</a> 定义一个联合类型</h3><p>你可能会看到的第一种组合类型的方式是联合类型。联合类型是由两个或多个其他类型形成的类型，表示值可以是这些类型中的任何一个。我们称其中每个类型为联合的成员。</p><p>让我们编写一个可以操作字符串或数字的函数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">printId</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Your ID is: &quot;</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// OK</span>
<span class="token function">printId</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// OK</span>
<span class="token function">printId</span><span class="token punctuation">(</span><span class="token string">&quot;202&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Error</span>
<span class="token function">printId</span><span class="token punctuation">(</span><span class="token punctuation">{</span> myID<span class="token operator">:</span> <span class="token number">22342</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Argument of type &#39;{ myID: number; }&#39; is not assignable to parameter of type &#39;string | number&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用联合类型" tabindex="-1"><a class="header-anchor" href="#使用联合类型" aria-hidden="true">#</a> 使用联合类型</h3><p>提供匹配联合类型的值很容易，只需要提供与联合的任何成员匹配的类型即可。如果你有一个联合类型的值，如何处理它呢？</p><p>只有在每个联合成员上都是有效的操作，<code>TypeScript</code> 才会允许操作。例如，如果你有字符串 | 数字的联合类型，你不能使用仅适用于字符串的方法：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">printId</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Property &#39;toUpperCase&#39; does not exist on type &#39;string | number&#39;.</span>
  <span class="token comment">// Property &#39;toUpperCase&#39; does not exist on type &#39;number&#39;.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方案是使用代码缩小联合，就像在没有类型注释的 <code>JavaScript</code> 中一样。当 <code>TypeScript</code> 可以根据代码结构推断出一个更具体的类型时，缩小会发生。</p><p>例如，<code>TypeScript</code> 知道只有字符串值才具有 <code>typeof</code> 值为 &quot;<code>string</code>&quot;：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">printId</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> id <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在这个分支中，id 是 &#39;string&#39; 类型</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里，id 是 &#39;number&#39; 类型</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个例子是使用像 <code>Array.isArray</code> 这样的函数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">welcomePeople</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在这里：&#39;x&#39; 是 &#39;string[]&#39; 类型</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; and &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在这里：&#39;x&#39; 是 &#39;string&#39; 类型</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome lone traveler &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，在<code>else</code>分支中，我们不需要做任何特殊处理 - 如果<code>x</code>不是一个<code>string[]</code>，那么它肯定是一个字符串。</p><p>有时你会有一个联合类型，其中所有成员都有一些共同点。例如，数组和字符串都有一个<code>slice</code>方法。如果联合中的每个成员都有一个共同的属性，那么你可以在不需要缩小范围的情况下使用该属性：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Return type is inferred as number[] | string</span>
<span class="token keyword">function</span> <span class="token function">getFirstThree</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可能会让人感到困惑的是，类型的联合似乎具有这些类型属性的交集。这不是偶然的 - 名称“<code>union</code>”来自类型理论。number | string 的联合是通过从每个类型的值中取并集来组成的。请注意，给定具有相应事实的两个集合，只有这些事实的交集适用于它们本身的联合。例如，如果我们有一个戴帽子的高个子人的房间，和另一个戴帽子的西班牙语演讲者的房间，将这些房间结合起来后，我们只知道每个人一定戴着帽子。</p></blockquote><h2 id="类型别名" tabindex="-1"><a class="header-anchor" href="#类型别名" aria-hidden="true">#</a> 类型别名</h2><p>我们一直在直接在类型注释中编写对象类型和联合类型。这很方便，但通常我们想多次使用同一种类型，并使用单个名称引用它。</p><p>类型别名正是为此而存在 - 是任何类型的名称。类型别名的语法是：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 与之前的示例完全相同</span>
<span class="token keyword">function</span> <span class="token function">printCoord</span><span class="token punctuation">(</span>pt<span class="token operator">:</span> Point<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The coordinate&#39;s x value is &quot;</span> <span class="token operator">+</span> pt<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The coordinate&#39;s y value is &quot;</span> <span class="token operator">+</span> pt<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">printCoord</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，你可以使用类型别名来为任何类型命名，而不仅仅是对象类型。例如，类型别名可以为联合类型命名：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">ID</span></span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意，别名只是别名 - 你不能使用类型别名创建不同/不同版本的同一类型。当你使用别名时，就像你编写了别名的类型一样。换句话说，这段代码看起来可能是非法的，但是根据 <code>TypeScript</code>，它是可以的，因为两种类型都是相同类型的别名：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UserInputSanitizedString</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">sanitizeInput</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> UserInputSanitizedString <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">sanitize</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Create a sanitized input</span>
<span class="token keyword">let</span> userInput <span class="token operator">=</span> <span class="token function">sanitizeInput</span><span class="token punctuation">(</span><span class="token function">getInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 但是仍然可以重新分配字符串</span>
userInput <span class="token operator">=</span> <span class="token string">&quot;new input&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>译者注: 这段代码定义了一个名为 <code>UserInputSanitizedString</code> 的类型别名，它实际上只是另一个名字对于 <code>string</code> 类型。接下来的 <code>sanitizeInput</code> 函数接收一个字符串作为参数并返回 <code>UserInputSanitizedString</code> 类型的结果，这意味着它返回一个被 <code>sanitize</code> 函数处理过的字符串。然后，通过调用 <code>sanitizeInput</code> 函数并将其结果分配给 <code>userInput</code> 变量，创建了一个被处理过的字符串输入。最后，代码重新将 <code>userInput</code> 变量分配为一个新字符串，尽管它的类型是 <code>UserInputSanitizedString</code>，但这是被允许的，因为类型别名只是一个别名，不会创建一个新的、不同的类型。</p></blockquote><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h2><p>接口声明是另一种为对象类型命名的方式：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">printCoord</span><span class="token punctuation">(</span>pt<span class="token operator">:</span> Point<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The coordinate&#39;s x value is &quot;</span> <span class="token operator">+</span> pt<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The coordinate&#39;s y value is &quot;</span> <span class="token operator">+</span> pt<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">printCoord</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像我们在上面使用类型别名时一样，该示例的工作方式就像我们使用了一个匿名对象类型一样。<code>TypeScript</code> 只关心我们传递给 <code>printCoord</code> 的值的结构 - 它只关心它具有预期的属性。只关心类型的结构和功能是我们将 <code>TypeScript</code> 称为结构化类型系统的原因。</p><h3 id="类型别名和接口的区别" tabindex="-1"><a class="header-anchor" href="#类型别名和接口的区别" aria-hidden="true">#</a> 类型别名和接口的区别</h3><p>**类型别名和接口非常相似，在许多情况下，你可以自由选择使用它们之一。**几乎所有接口的特性在类型中都是可用的，<strong>关键区别在于类型无法重新打开以添加新属性，而接口则始终是可扩展的</strong>。</p><p>通过扩展接口来创建新的接口</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Bear</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  honey<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> bear <span class="token operator">=</span> <span class="token function">getBear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bear<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
bear<span class="token punctuation">.</span>honey<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过交叉类型扩展类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Animal</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Bear</span> <span class="token operator">=</span> Animal <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  honey<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> bear <span class="token operator">=</span> <span class="token function">getBear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bear<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
bear<span class="token punctuation">.</span>honey<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向现有接口添加新字段</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span>
  ts<span class="token operator">:</span> TypeScriptAPI<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> src <span class="token operator">=</span> <span class="token string">&#39;const a = &quot;Hello World&quot;&#39;</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>ts<span class="token punctuation">.</span><span class="token function">transpileModule</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建后的类型无法更改</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Window</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Window</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  ts<span class="token operator">:</span> TypeScriptAPI<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 错误：重复的标识符“Window”。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你将在后面的章节中了解更多有关这些概念的内容，所以如果你不立刻理解所有内容，不用担心。</p><ul><li><p>在 <code>TypeScript 4.2</code> 版本之前，类型别名名称可能会出现在错误消息中，有时代替等效的匿名类型（这可能是想要的，也可能不是）。接口将始终在错误消息中命名。</p></li><li><p>类型别名不能参与声明合并，但接口可以。</p></li><li><p>接口只能用于声明对象的形状，而不能重命名基本类型。</p></li><li><p>接口名称将始终以其原始形式出现在错误消息中，但仅在按名称使用它们时才会出现。</p></li><li><p>在大多数情况下，你可以根据个人喜好进行选择，如果 <code>TypeScript</code> 需要另一种声明类型，它会告诉你。如果你需要一个启发式算法，请使用接口，直到需要使用类型的功能为止。</p></li></ul><h2 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言" aria-hidden="true">#</a> 类型断言</h2><p>有时你会拥有 <code>TypeScript</code> 无法知道的某个值的类型信息。</p><p>例如，如果你使用 <code>document.getElementById</code>，<code>TypeScript</code> 只知道它会返回某种 <code>HTMLElement</code>，但你可能知道你的页面上会始终有一个特定 <code>ID</code> 的 <code>HTMLCanvasElement</code>。</p><p>在这种情况下，你可以使用类型断言来指定一个更具体的类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> myCanvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;main_canvas&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLCanvasElement<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与类型注释一样，类型断言会被编译器移除，并不会影响代码的运行时行为。</p><p>你也可以使用尖括号语法（除非代码在 <code>.tsx</code> 文件中），这是等价的：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> myCanvas <span class="token operator">=</span> <span class="token operator">&lt;</span>HTMLCanvasElement<span class="token operator">&gt;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;main_canvas&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>提醒：由于类型断言在编译时被移除，所以它没有与类型断言相关的运行时检查。如果类型断言是错误的，不会产生异常或 <code>null</code>。</p><p><code>TypeScript</code> 只允许将类型断言转换为更具体或不那么具体的版本。此规则防止“不可能”的强制转换，如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span> <span class="token keyword">as</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token comment">// 将类型 &#39;string&#39; 转换为类型 &#39;number&#39; 可能是错误的，因为两个类型都不足够重叠。如果这是有意的，请先将表达式转换为 &#39;unknown&#39;。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有时，这个规则可能过于保守，会禁止更复杂的强制转换，但这些转换可能是有效的。如果发生这种情况，你可以使用两个断言，首先转换为 <code>any</code>（或我们稍后介绍的 <code>unknown</code>），然后再转换为所需的类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> expr <span class="token keyword">as</span> <span class="token builtin">any</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="字面量类型" tabindex="-1"><a class="header-anchor" href="#字面量类型" aria-hidden="true">#</a> 字面量类型</h2><p>除了通用类型<code>string</code>和<code>number</code>之外，我们可以在类型位置引用特定的字符串和数字。</p><p>一种思考方式是考虑<code>JavaScript</code>如何使用不同的方式声明变量。<code>var</code>和<code>let</code>都允许更改变量中包含的内容，而<code>const</code>则不允许。这反映在<code>TypeScript</code>为字面量创建类型的方式上。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> changingString <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>
changingString <span class="token operator">=</span> <span class="token string">&quot;Olá Mundo&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 因为changingString可以表示任何可能的字符串，所以在类型系统中描述为这样</span>
<span class="token keyword">let</span> changingString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> constantString <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 因为constantString只能表示1个可能的字符串，所以它具有文字类型表示, 所以在类型系统中描述为这样</span>
<span class="token keyword">const</span> constantString<span class="token operator">:</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单独使用字面量类型并不是很有价值：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// OK</span>
x <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
x <span class="token operator">=</span> <span class="token string">&quot;howdy&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// Type &#39;&quot;howdy&quot;&#39; is not assignable to type &#39;&quot;hello&quot;&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个只能拥有一个值的变量并没有什么用处！</p><p>但是通过将字面量组合成联合类型，您可以表达一个更有用的概念 - 例如，仅接受一定已知值集的函数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">printText</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> alignment<span class="token operator">:</span> <span class="token string">&quot;left&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;right&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;center&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token function">printText</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;left&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printText</span><span class="token punctuation">(</span><span class="token string">&quot;G&#39;day, mate&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;centre&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Argument of type &#39;&quot;centre&quot;&#39; is not assignable to parameter of type &#39;&quot;left&quot; | &quot;right&quot; | &quot;center&quot;&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数字字面量类型的工作方式相同：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">===</span> b <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，您可以将这些与非文字类型组合：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span>
  width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">configure</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Options <span class="token operator">|</span> <span class="token string">&quot;auto&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">configure</span><span class="token punctuation">(</span><span class="token string">&quot;auto&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">configure</span><span class="token punctuation">(</span><span class="token string">&quot;automatic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Argument of type &#39;&quot;automatic&quot;&#39; is not assignable to parameter of type &#39;Options | &quot;auto&quot;&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一种字面类型：布尔文字类型。只有两个布尔文字类型，正如您可能猜到的那样，它们是 <code>true</code> 和 <code>false</code> 类型。类型布尔本身实际上只是 <code>true</code> | <code>false</code> 的联合别名。</p><h3 id="字面推断" tabindex="-1"><a class="header-anchor" href="#字面推断" aria-hidden="true">#</a> 字面推断</h3><p>当您使用对象初始化变量时，<code>TypeScript</code> 会认为该对象的属性可能会稍后更改值。例如，如果您编写了这样的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> counter<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>someCondition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  obj<span class="token punctuation">.</span>counter <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>TypeScript</code> 不会假定将 <code>1</code> 赋值给以前为 <code>0</code> 的字段是错误的。另一种说法是 <code>obj.counter</code> 必须具有类型 <code>number</code>，而不是 <code>0</code>，因为类型用于确定读写行为。</p><p>对于字符串也是一样的：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> req <span class="token operator">=</span> <span class="token punctuation">{</span> url<span class="token operator">:</span> <span class="token string">&quot;https://example.com&quot;</span><span class="token punctuation">,</span> method<span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 这个函数是译者加的,个人认为更容易理解.</span>
<span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> method<span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">handleRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> req<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Argument of type &#39;string&#39; is not assignable to parameter of type &#39;&quot;GET&quot; | &quot;POST&quot;&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>req.method</code>被推断为<code>string</code>而不是&quot;<code>GET</code>&quot;。因为在创建<code>req</code>和调用<code>handleRequest</code>之间可能会执行代码，该代码可能会将新的字符串赋值给<code>req.method</code>，例如&quot;<code>GUESS</code>&quot;，因此<code>TypeScript</code>认为此代码存在错误。</p><p>有两种解决方法。</p><p>您可以在任一位置添加类型断言来更改推断：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 修改 1：</span>
<span class="token keyword">const</span> req <span class="token operator">=</span> <span class="token punctuation">{</span> url<span class="token operator">:</span> <span class="token string">&quot;https://example.com&quot;</span><span class="token punctuation">,</span> method<span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span> <span class="token keyword">as</span> <span class="token string">&quot;GET&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 修改 2：</span>
<span class="token function">handleRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> req<span class="token punctuation">.</span>method <span class="token keyword">as</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 1 表示“我打算 <code>req.method</code> 始终具有字面类型&quot;<code>GET</code>&quot;”，防止在此字段之后将“<code>GUESS</code>”分配给该字段。 修改 2 表示“我知道由于其他原因 <code>req.method</code> 具有值&quot;<code>GET</code>&quot;“。</p><p>您可以使用 <code>as const</code> 将整个对象转换为类型字面量：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> req <span class="token operator">=</span> <span class="token punctuation">{</span> url<span class="token operator">:</span> <span class="token string">&quot;https://example.com&quot;</span><span class="token punctuation">,</span> method<span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token function">handleRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> req<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>as const</code> 后缀类似于 <code>const</code>，但用于类型系统，确保所有属性都分配了字面类型，而不是更一般的版本，例如 <code>string</code> 或 <code>number</code>。</p><h2 id="null-和-undefined" tabindex="-1"><a class="header-anchor" href="#null-和-undefined" aria-hidden="true">#</a> <code>null</code> 和 <code>undefined</code></h2><p><code>JavaScript</code>有两个原始值用于表示缺少或未初始化的值：<code>null</code>和<code>undefined</code>。</p><p><code>TypeScript</code>有两个相应的同名类型。这些类型的行为取决于是否启用了<code>strictNullChecks</code>选项。</p><h3 id="strictnullchecks为off时" tabindex="-1"><a class="header-anchor" href="#strictnullchecks为off时" aria-hidden="true">#</a> <code>strictNullChecks</code>为<code>off</code>时</h3><p><code>strictNullChecks</code>为<code>off</code>时，可能为<code>null</code>或<code>undefined</code>的值仍可以正常访问，并且<code>null</code>和<code>undefined</code>值可以分配给任何类型的属性。这类似于没有空值检查的语言（例如<code>C＃，Java</code>）的行为。不检查这些值往往是错误的主要来源；如果代码库中有实际可行的情况，我们始终建议开启<code>strictNullChecks</code>选项。</p><h3 id="strictnullchecks为on时" tabindex="-1"><a class="header-anchor" href="#strictnullchecks为on时" aria-hidden="true">#</a> <code>strictNullChecks</code>为<code>on</code>时</h3><p><code>strictNullChecks</code>为<code>on</code>时，当一个值为<code>null</code>或<code>undefined</code>时，您需要在使用该值的方法或属性之前测试这些值。就像在使用可选属性之前检查<code>undefined</code>一样，我们可以使用缩小类型范围的方法检查可能为<code>null</code>的值：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// do nothing</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="尾随的非空断言操作符-后缀" tabindex="-1"><a class="header-anchor" href="#尾随的非空断言操作符-后缀" aria-hidden="true">#</a> 尾随的非空断言操作符（后缀!）</h3><p><code>TypeScript</code> 还有一种特殊语法，可以在不进行任何显式检查的情况下从类型中移除 <code>null</code> 和 <code>undefined</code>。在任何表达式后面写<code>!</code>实际上是一种类型断言，即该值不为 <code>null</code> 或 <code>undefined</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">liveDangerously</span><span class="token punctuation">(</span>x<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// No error</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与其他类型断言一样，这不会改变您的代码的运行时行为，因此重要的是只有在您知道该值不可能为 <code>null</code> 或 <code>undefined</code> 时才使用<code>!</code>。</p><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h2><p>枚举是由 <code>TypeScript</code> 添加到 <code>JavaScript</code> 中的功能，允许描述可能是一组可能的命名常量之一的值。与大多数 <code>TypeScript</code> 功能不同，这不是对 <code>JavaScript</code> 的类型级别的补充，而是添加到语言和运行时中的东西。因此，这是一个您应该知道存在的功能，但除非您确定，否则可能暂时不要使用。您可以在 <code>Enum</code> 参考页面中了解更多有关枚举的信息。</p><h2 id="不太常见的原始类型" tabindex="-1"><a class="header-anchor" href="#不太常见的原始类型" aria-hidden="true">#</a> 不太常见的原始类型</h2><p>值得一提的是，在类型系统中表示的 <code>JavaScript</code> 中的其他原始类型。虽然我们在这里不会深入讨论。</p><p>###　<code>bigint</code> 从 <code>ES2020</code> 开始，<code>JavaScript</code> 中有一种用于非常大的整数的原始类型，即 <code>BigInt</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Creating a bigint via the BigInt function</span>
<span class="token keyword">const</span> oneHundred<span class="token operator">:</span> bigint <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Creating a BigInt via the literal syntax</span>
<span class="token keyword">const</span> anotherHundred<span class="token operator">:</span> bigint <span class="token operator">=</span> <span class="token number">100n</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以在 <code>TypeScript 3.2</code> 版本发布说明中了解有关 <code>BigInt</code> 的更多信息。</p><h3 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> <code>symbol</code></h3><p><code>JavaScript</code> 中有一个用于通过 <code>Symbol（）</code>函数创建全局唯一引用的原始类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> secondName <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>firstName <span class="token operator">===</span> secondName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// This condition will always return &#39;false&#39; since the types &#39;typeof firstName&#39; and &#39;typeof secondName&#39; have no overlap.</span>
  <span class="token comment">// Can&#39;t ever happen</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,162),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","everydayTypes.html.vue"]]);export{d as default};
