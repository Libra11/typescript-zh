import{_ as n,p as s,q as a,a1 as e}from"./framework-1cb228a4.js";const t={},p=e(`<p>模板字面量类型是在字符串字面量类型的基础上构建的，具有通过联合类型扩展为多个字符串的能力。</p><p>它们与 <code>JavaScript</code> 中的模板字面量字符串具有相同的语法，但用于类型位置。当与具体的字面量类型一起使用时，模板字面量通过连接内容产生一个新的字符串字面量类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">World</span> <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Greeting</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>World<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">// type Greeting = &quot;hello world&quot;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当联合类型用于插值位置时，类型是由每个联合成员表示的可能的每个字符串字面量集合组成的：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">EmailLocaleIDs</span> <span class="token operator">=</span> <span class="token string">&quot;welcome_email&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;email_heading&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">FooterLocaleIDs</span> <span class="token operator">=</span> <span class="token string">&quot;footer_title&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;footer_sendoff&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">AllLocaleIDs</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>EmailLocaleIDs <span class="token operator">|</span> FooterLocaleIDs<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_id</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">AllLocaleIDs</span> <span class="token operator">=</span>
  <span class="token operator">|</span> <span class="token string">&quot;welcome_email_id&quot;</span>
  <span class="token operator">|</span> <span class="token string">&quot;email_heading_id&quot;</span>
  <span class="token operator">|</span> <span class="token string">&quot;footer_title_id&quot;</span>
  <span class="token operator">|</span> <span class="token string">&quot;footer_sendoff_id&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于模板字面量中的每个插值位置，联合类型进行交叉乘积：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">AllLocaleIDs</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>EmailLocaleIDs <span class="token operator">|</span> FooterLocaleIDs<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_id</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Lang</span> <span class="token operator">=</span> <span class="token string">&quot;en&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;ja&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;pt&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">LocaleMessageIDs</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Lang<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>AllLocaleIDs<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">LocaleMessageIDs</span> <span class="token operator">=</span>
  <span class="token operator">|</span> <span class="token string">&quot;en_welcome_email_id&quot;</span>
  <span class="token operator">|</span> <span class="token string">&quot;en_email_heading_id&quot;</span>
  <span class="token operator">|</span> <span class="token string">&quot;en_footer_title_id&quot;</span>
  <span class="token operator">|</span> <span class="token string">&quot;en_footer_sendoff_id&quot;</span>
  <span class="token operator">|</span> <span class="token string">&quot;ja_welcome_email_id&quot;</span>
  <span class="token operator">|</span> <span class="token string">&quot;ja_email_heading_id&quot;</span>
  <span class="token operator">|</span> <span class="token string">&quot;ja_footer_title_id&quot;</span>
  <span class="token operator">|</span> <span class="token string">&quot;ja_footer_sendoff_id&quot;</span>
  <span class="token operator">|</span> <span class="token string">&quot;pt_welcome_email_id&quot;</span>
  <span class="token operator">|</span> <span class="token string">&quot;pt_email_heading_id&quot;</span>
  <span class="token operator">|</span> <span class="token string">&quot;pt_footer_title_id&quot;</span>
  <span class="token operator">|</span> <span class="token string">&quot;pt_footer_sendoff_id&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通常建议人们对于大型字符串联合使用提前生成，但在更小的情况下也很有用。</p><h3 id="字符串联合类型" tabindex="-1"><a class="header-anchor" href="#字符串联合类型" aria-hidden="true">#</a> 字符串联合类型</h3><p>模板字面量的威力在于根据类型内部的信息定义新的字符串。</p><p>考虑一个函数（<code>makeWatchedObject</code>），它向传递的对象添加一个名为 <code>on()</code>的新函数。在 <code>JavaScript</code> 中，它的调用可能如下所示：<code>makeWatchedObject(baseObject)</code>。我们可以将基础对象想象为：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> passedObject <span class="token operator">=</span> <span class="token punctuation">{</span>
  firstName<span class="token operator">:</span> <span class="token string">&quot;Saoirse&quot;</span><span class="token punctuation">,</span>
  lastName<span class="token operator">:</span> <span class="token string">&quot;Ronan&quot;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将被添加到基本对象的 <code>on()</code>函数期望两个参数，<code>eventName</code>（字符串）和 <code>callBack</code>（函数）。</p><p><code>eventName</code> 应该是属性名 + &quot;<code>Changed</code>&quot; 的形式；因此，<code>firstNameChanged</code> 派生自基本对象中的属性 <code>firstName</code>。</p><p>当调用 <code>callBack</code> 函数时：</p><ul><li>应该传递一个与属性名的值相关联的类型的值；因此，由于 <code>firstName</code> 的类型为字符串，因此用于 <code>firstNameChanged</code> 事件的回调函数期望在调用时传递一个字符串。类似地，与 <code>age</code> 相关的事件应该期望使用数字参数进行调用。</li><li>应该具有 <code>void</code> 返回类型（为了演示的简单性）</li></ul><p>因此，<code>on()</code>的朴素函数签名可能是：<code>on(eventName: string, callBack: (newValue: any) =&gt; void)</code>。然而，在前面的描述中，我们确定了我们想在代码中记录的重要类型约束。模板字面量类型让我们将这些约束带入我们的代码中。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">makeWatchedObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  firstName<span class="token operator">:</span> <span class="token string">&quot;Saoirse&quot;</span><span class="token punctuation">,</span>
  lastName<span class="token operator">:</span> <span class="token string">&quot;Ronan&quot;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// makeWatchedObject has added \`on\` to the anonymous Object</span>

person<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;firstNameChanged&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">firstName was changed to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>on</code> 监听事件“<code>firstNameChanged</code>”，而不仅仅是“<code>firstName</code>”。如果我们要确保合格的事件名称集合由带有“<code>Changed</code>”的观察对象属性名称的联合限制，则我们的 <code>on()</code>的朴素规范可以更加健壮。虽然我们在 <code>JavaScript</code> 中做这样的计算（即 <code>Object.keys(passedObject).map(x =&gt; \${x}Changed)</code>）感到舒适，但类型系统内部的模板字面量提供了一种类似的字符串操作方法：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">PropEventSource<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">on</span><span class="token punctuation">(</span>
    eventName<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token keyword">keyof</span> Type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">Changed</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>newValue<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/// Create a &quot;watched object&quot; with an &#39;on&#39; method</span>
<span class="token comment">/// so that you can watch for changes to properties.</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">makeWatchedObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  obj<span class="token operator">:</span> Type
<span class="token punctuation">)</span><span class="token operator">:</span> Type <span class="token operator">&amp;</span> PropEventSource<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个，我们就可以构建一个会在给定错误属性时出错的东西：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">makeWatchedObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  firstName<span class="token operator">:</span> <span class="token string">&quot;Saoirse&quot;</span><span class="token punctuation">,</span>
  lastName<span class="token operator">:</span> <span class="token string">&quot;Ronan&quot;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

person<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;firstNameChanged&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Prevent easy human error (using the key instead of the event name)</span>
person<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;firstName&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Argument of type &#39;&quot;firstName&quot;&#39; is not assignable to parameter of type &#39;&quot;firstNameChanged&quot; | &quot;lastNameChanged&quot; | &quot;ageChanged&quot;&#39;.</span>

<span class="token comment">// It&#39;s typo-resistant</span>
person<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;frstNameChanged&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Argument of type &#39;&quot;frstNameChanged&quot;&#39; is not assignable to parameter of type &#39;&quot;firstNameChanged&quot; | &quot;lastNameChanged&quot; | &quot;ageChanged&quot;&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="推断模板字面量" tabindex="-1"><a class="header-anchor" href="#推断模板字面量" aria-hidden="true">#</a> 推断模板字面量</h3><p>请注意，我们没有从传递的原始对象中受益于所有提供的信息。给定 <code>firstName</code> 的更改（即 <code>firstNameChanged</code> 事件），我们应该期望回调将收到一个类型为字符串的参数。类似地，更改年龄的回调应该接收一个数字参数。我们正在天真地使用任何来类型化 <code>callBack</code> 的参数。再次，模板文字类型使得可以确保属性的数据类型将与该属性的回调的第一个参数的类型相同。</p><p>使这一切成为可能的关键见解是：我们可以使用一个带有泛型的函数，使得：</p><ul><li>在第一个参数中使用的字面量被捕获为字面量类型</li><li>该字面量类型可以被验证为在泛型中有效属性的联合中</li><li>可以使用索引访问来查找已验证属性的类型在泛型结构中</li><li>可以应用此类型信息以确保回调函数的参数类型相同</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">PropEventSource<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token generic-function"><span class="token function">on</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token keyword">keyof</span> Type<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
    eventName<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">Changed</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>newValue<span class="token operator">:</span> Type<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">makeWatchedObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  obj<span class="token operator">:</span> Type
<span class="token punctuation">)</span><span class="token operator">:</span> Type <span class="token operator">&amp;</span> PropEventSource<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">makeWatchedObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  firstName<span class="token operator">:</span> <span class="token string">&quot;Saoirse&quot;</span><span class="token punctuation">,</span>
  lastName<span class="token operator">:</span> <span class="token string">&quot;Ronan&quot;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

person<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;firstNameChanged&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>newName<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// (parameter) newName: string</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">new name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newName<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

person<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;ageChanged&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>newAge<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// (parameter) newAge: number</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>newAge <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;warning! negative age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们将 <code>on</code> 方法变成了一个通用方法。</p><p>当用户使用字符串“<code>firstNameChanged</code>”调用时，<code>TypeScript</code> 将尝试为 <code>Key</code> 推断正确的类型。为此，它将 <code>Key</code> 与“<code>Changed</code>”之前的内容进行匹配，并推断出字符串“<code>firstName</code>”。一旦 <code>TypeScript</code> 弄清楚了这一点，<code>on</code> 方法就可以获取原始对象上 <code>firstName</code> 的类型，这种情况下是字符串。类似地，当使用“<code>ageChanged</code>”调用时，<code>TypeScript</code> 找到属性 <code>age</code> 的类型，该类型为数字。</p><p>推断可以以不同的方式组合，通常是为了解构字符串并以不同的方式重构它们。</p><h3 id="内置字符串操纵类型" tabindex="-1"><a class="header-anchor" href="#内置字符串操纵类型" aria-hidden="true">#</a> 内置字符串操纵类型</h3><p>为了帮助进行字符串操作，<code>TypeScript</code> 包括一组可用于字符串操作的类型。这些类型内置于编译器中以提高性能，并且无法在 <code>TypeScript</code> 附带的 <code>.d.ts</code> 文件中找到。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>Uppercase<span class="token operator">&lt;</span>StringType<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将字符串中的每个字符转换为大写版本。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Greeting</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, world&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">ShoutyGreeting</span> <span class="token operator">=</span> Uppercase<span class="token operator">&lt;</span>Greeting<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type ShoutyGreeting = &quot;HELLO, WORLD&quot;;</span>

<span class="token keyword">type</span> <span class="token class-name">ASCIICacheKey<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ID-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Uppercase<span class="token operator">&lt;</span>Str<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">MainID</span> <span class="token operator">=</span> ASCIICacheKey<span class="token operator">&lt;</span><span class="token string">&quot;my_app&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type MainID = &quot;ID-MY_APP&quot;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Lowercase&lt;StringType&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将字符串中的每个字符转换为小写字母。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Greeting</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, world&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">QuietGreeting</span> <span class="token operator">=</span> Lowercase<span class="token operator">&lt;</span>Greeting<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type QuietGreeting = &quot;hello, world&quot;</span>

<span class="token keyword">type</span> <span class="token class-name">ASCIICacheKey<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">id-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Lowercase<span class="token operator">&lt;</span>Str<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">MainID</span> <span class="token operator">=</span> ASCIICacheKey<span class="token operator">&lt;</span><span class="token string">&quot;MY_APP&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type MainID = &quot;id-my_app&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>Capitalize<span class="token operator">&lt;</span>StringType<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将字符串中的第一个字符转换为大写字母。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">LowercaseGreeting</span> <span class="token operator">=</span> <span class="token string">&quot;hello, world&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Greeting</span> <span class="token operator">=</span> Capitalize<span class="token operator">&lt;</span>LowercaseGreeting<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type Greeting = &quot;Hello, world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>Uncapitalize<span class="token operator">&lt;</span>StringType<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将字符串中的第一个字符转换为小写字母。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UppercaseGreeting</span> <span class="token operator">=</span> <span class="token string">&quot;HELLO WORLD&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">UncomfortableGreeting</span> <span class="token operator">=</span> Uncapitalize<span class="token operator">&lt;</span>UppercaseGreeting<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type UncomfortableGreeting = &quot;hELLO WORLD&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","templateLiteralTypes.html.vue"]]);export{u as default};
