import{_ as e,p as o,q as c,a1 as i}from"./framework-1cb228a4.js";const t={},d=i('<h2 id="从类型中创建类型" tabindex="-1"><a class="header-anchor" href="#从类型中创建类型" aria-hidden="true">#</a> 从类型中创建类型</h2><p><code>TypeScript</code> 的类型系统非常强大，因为它允许在其他类型的基础上表达类型。</p><p>这个想法的最简单形式是泛型，实际上我们还有各种各样的类型操作符可用。我们也可以根据我们已经拥有的值来表达类型。</p><p>通过组合各种类型操作符，我们可以用简洁、可维护的方式表达复杂的操作和值。在本节中，我们将介绍以现有类型或值为基础来表达新类型的方式。</p><ul><li>泛型 - 带参数的类型</li><li><code>keyof</code> 类型运算符 - 使用 <code>keyof</code> 运算符创建新类型</li><li><code>typeof</code> 类型运算符 - 使用 <code>typeof</code> 运算符创建新类型</li><li>索引访问类型 - 使用 <code>Type [&#39;a&#39;]</code>语法访问类型的子集</li><li>条件类型 - 在类型系统中起到 <code>if</code> 语句的作用的类型</li><li>映射类型 - 通过映射现有类型中的每个属性来创建类型</li><li>模板字面量类型 - 通过模板字面量字符串改变属性的映射类型</li></ul>',5),l=[d];function a(r,p){return o(),c("div",null,l)}const n=e(t,[["render",a],["__file","creatingTypesfromTypes.html.vue"]]);export{n as default};
